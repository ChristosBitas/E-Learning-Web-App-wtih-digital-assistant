package com.eLearningWebApp.eLearningWebApp.entity;


import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

/**
 * User entity class representing the "users" table in the database.
 * This class also implements the UserDetails interface, allowing it to be used by Spring Security for authentication.
 */


@Data  // Automatically generate getters, setters, equals, hashCode, and toString methods.
@Entity  // Marks this class as a JPA entity for ORM (Object-Relational Mapping).
@Table(name="users")  // Specifies that the table in the database is named "users".
public class User implements UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)  // Indicates that the ID is auto-generated by the database.
    private long id;  // Unique identifier for each user.

    @NotBlank(message = "Username is empty")  // Ensures the name field is not empty or null.
    private String name;  // Stores the user's name.

    @NotBlank(message = "Password is empty")  // Ensures the password field is not empty or null.
    private String password;  // Stores the user's password (should be securely hashed in practice).

    @NotBlank(message = "Email is empty")  // Ensures the email field is not empty or null.
    @Column(unique = true)  // Ensures the email is unique in the database.
    private String email;  // Stores the user's email, which is also used as the username for authentication.

    private String role;  // Stores the user's role, such as "ADMIN" or "USER".

    private int userScore = 0; // Stores the user's score. Default is set to 0.

    /**
     * Returns the authorities granted to the user based on their role.
     * @return A collection of authorities, which includes the role as a SimpleGrantedAuthority.
     */
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(role));  // Converts the role into a granted authority.
    }

    /**
     * Returns the username used to authenticate the user.
     * In this case, the username is the user's email.
     * @return The user's email.
     */
    @Override
    public String getUsername() {
        return email;  // The email serves as the username for authentication.
    }

    /**
     * Indicates whether the user's account has expired.
     * Always returns true, meaning the account is not expired.
     * @return true (the account is non-expired).
     */
    @Override
    public boolean isAccountNonExpired() {
        return true;  // Account is always considered non-expired.
    }

    /**
     * Indicates whether the user is locked or unlocked.
     * Always returns true, meaning the account is not locked.
     * @return true (the account is not locked).
     */
    @Override
    public boolean isAccountNonLocked() {
        return true;  // Account is always considered non-locked.
    }

    /**
     * Indicates whether the user's credentials (password) have expired.
     * Always returns true, meaning the credentials are not expired.
     * @return true (credentials are valid).
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return true;  // Credentials are always considered non-expired.
    }

    /**
     * Indicates whether the user is enabled or disabled.
     * Always returns true, meaning the user is enabled.
     * @return true (the user is enabled).
     */
    @Override
    public boolean isEnabled() {
        return true;  // User is always considered enabled.
    }
}